// Test script for network optimizations
console.log('üöÄ Testing Network Optimizations...');

// Test 1: Service Worker Registration
if ('serviceWorker' in navigator) {
  console.log('‚úÖ Service Worker supported');
  navigator.serviceWorker.getRegistrations().then(registrations => {
    console.log(`üì± Service Workers registered: ${registrations.length}`);
    registrations.forEach((reg, index) => {
      console.log(`  ${index + 1}. ${reg.scope} - State: ${reg.active ? 'Active' : 'Inactive'}`);
    });
  });
} else {
  console.log('‚ùå Service Worker not supported');
}

// Test 2: Cache API
if ('caches' in window) {
  console.log('‚úÖ Cache API supported');
  caches.keys().then(cacheNames => {
    console.log(`üì¶ Available caches: ${cacheNames.length}`);
    cacheNames.forEach(name => console.log(`  - ${name}`));
  });
} else {
  console.log('‚ùå Cache API not supported');
}

// Test 3: Network Information API
if ('connection' in navigator) {
  const conn = navigator.connection;
  console.log('‚úÖ Network Information API supported');
  console.log(`üì∂ Connection type: ${conn.effectiveType || 'unknown'}`);
  console.log(`‚ö° Download speed: ${conn.downlink || 'unknown'} Mbps`);
  console.log(`‚è±Ô∏è Latency: ${conn.rtt || 'unknown'} ms`);
} else {
  console.log('‚ùå Network Information API not supported');
}

// Test 4: Intersection Observer
if ('IntersectionObserver' in window) {
  console.log('‚úÖ Intersection Observer supported');
} else {
  console.log('‚ùå Intersection Observer not supported');
}

// Test 5: AbortController (for timeouts)
if ('AbortController' in window) {
  console.log('‚úÖ AbortController supported');
} else {
  console.log('‚ùå AbortController not supported');
}

console.log('\nüéØ Network Optimization Status:');
console.log('If you see mostly ‚úÖ marks, your optimizations are working!');
console.log('Check the browser console for detailed information.'); 